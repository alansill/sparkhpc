#!/bin/env python
#
#
# CLI for starting and running Spark standalone clusters on HPC resources
#
#

from __future__ import print_function
import click
from sparkhpc import sparkjob
import subprocess

@click.group()
@click.option('--scheduler', type=click.Choice(['lsf']), default='lsf', help='Which scheduler to use')
@click.pass_context
def cli(ctx, scheduler):
    ctx.obj['SJ'] = sparkjob.sparkjob_factory(scheduler)

@cli.command()
@click.argument('ncores')
@click.option('--walltime', default="00:30", help="Walltime in HH:MM format")
@click.option('--jobname', default='spark', help='Name to use for the job')
@click.option('--template', default='./sparkjob.lsf.template', help='Job template path')
@click.option('--driver-memory', default='2G', help='Spark driver memory', envvar='SPARK_DRIVER_MEMORY')
@click.option('--executor-memory', default='2G', help='Spark executor memory', envvar='SPARK_EXECUTOR_MEMORY')
@click.option('--wait', default=0, help='Seconds to wait until job starts')
@click.pass_context
def submit(ctx, ncores, walltime, jobname, template, driver_memory, executor_memory, wait):
    """Submit the spark cluster as an LSF job"""
    
    SJ = ctx.obj['SJ']

    sj = SJ(ncores=ncores, walltime=walltime, jobname=jobname, template=template,
            driver_memory=driver_memory, executor_memory=executor_memory)
    sj.submit()

    if wait: 
        print('Waiting for job to start')
        sj.wait_to_start()
        

@cli.command()
@click.pass_context
def info(ctx):
    """Get info about currently running clusters"""
    SJ = ctx.obj['SJ']
    sjs = SJ.current_clusters()

    if len(sjs) == 0: 
        print('No Spark clusters found')

    for i,sj in enumerate(sjs): 
        print('----- Cluster %d -----'%i)
        if SJ.job_started(sj.jobid): 
            print('Number of cores: %s'%sj.ncores)
            print('master URL: %s'%SJ.master_url(sj.jobid)[0])
            print('Spark UI: %s'%SJ.master_ui(sj.jobid)[0])
        else: 
            print('Job %s yet started'%sj.jobid)


@cli.command()
@click.argument('clusterid', type=click.INT)
@click.pass_context
def kill(ctx, clusterid):
    """Kill a currently running cluster"""
    SJ = ctx.obj['SJ']
    SJ.kill_cluster(clusterid)
    

if __name__ == "__main__":
    cli(obj={})
